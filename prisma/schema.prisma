// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]

  @@map("categories")
}

model Post {
  id          String  @id @default(cuid())
  title       String
  slug        String
  description String
  content     String
  cover       String?
  published   Boolean @default(false)
  author      User   @relation(fields: [authorId], references: [id])
  authorId    String

  likedBy      Like[]
  bookmarkedBy Bookmark[]
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model User {
  id            String    @id @default(cuid())
  name          String @default("Anonymous")
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  posts     Post[]
  likes     Like[]
  bookmarks Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([userId, postId])
  @@map("likes")
}

model Bookmark {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([userId, postId])
  @@map("bookmarks")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}
